package components

import (
	"context"
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/damongolding/immich-kiosk/internal/common"
	"github.com/damongolding/immich-kiosk/internal/immich"
	"github.com/damongolding/immich-kiosk/internal/utils"
	"github.com/dustin/go-humanize"
	"io"
	"net/url"
	"path"
	"strconv"
	"strings"
	"time"
)

// renderMoreInfo generates the HTML for displaying detailed information about images
// It shows camera data, original image data, detected people, and optional QR codes/links
// Parameters:
//   - viewData: The view data containing images and display options
templ renderMoreInfo(viewData common.ViewData) {
	<div id="more-info" hx-swap-oob="true">
		for _, img := range viewData.Images {
			<div class="more-info--image">
				<div class="more-info--image--data">
					@cameraData(img.ImmichImage.ExifInfo)
					@originalImageData(img.ImmichImage)
					@people(img.ImmichImage.People)
					<div class="more-info--button-group">
						if viewData.ShowMoreInfoImageLink {
							<a class="more-info--image-link" href={ templ.SafeURL(immichImageUrl(viewData.ImmichUrl, viewData.ImmichExternalUrl, img.ImmichImage.ID)) } target="_blank">
								View image in Immich
							</a>
						}
						if len(viewData.Webhooks) != 0 {
							<button
								class="more-info--webhook"
								hx-post="/webhooks"
								hx-trigger="click throttle:2s"
								hx-include=".kiosk-history--entry"
								hx-headers={ fmt.Sprintf(`{"X-Timestamp": "%d", "X-Signature": "%s", "kiosk-webhook-event": "user.webhook.trigger.info_overlay"}`, time.Now().Unix(), webhookSignature()) }
								hx-swap="textContent"
							>
								Trigger webhook
							</button>
						}
					</div>
				</div>
				if viewData.ShowMoreInfoQrCode {
					<div class="more-info--image--qr-code">
						<img src={ utils.CreateQrCode(immichImageUrl(viewData.ImmichUrl, viewData.ImmichExternalUrl, img.ImmichImage.ID)) }/>
					</div>
				}
			</div>
		}
	</div>
}

// cameraData displays the camera make and model information from EXIF data
// Parameters:
//   - exifInfo: EXIF information containing camera details
templ cameraData(exifInfo immich.ExifInfo) {
	<div>
		<div>
			<h3>
				if exifInfo.Make != "" {
					{ exifInfo.Make }
				} else {
					Unknown Make
				}
			</h3>
		</div>
		<div>
			if exifInfo.Model != "" {
				{ exifInfo.Model }
			} else {
				Unknown Model
			}
		</div>
	</div>
}

// originalImageData displays original filename and image dimensions/size
// Parameters:
//   - img: The Immich asset containing image metadata
templ originalImageData(img immich.ImmichAsset) {
	<div>
		<div>
			<h3>
				{ img.OriginalFileName }
			</h3>
		</div>
		<div>
			{ fmt.Sprint(img.ExifInfo.ExifImageWidth) } x { fmt.Sprint(img.ExifInfo.ExifImageHeight) } <span class="image--metadata--exif--seperator">&#124;</span> { humanize.Bytes(uint64(img.ExifInfo.FileSizeInByte)) }
		</div>
	</div>
}

// people generates a component displaying names of people detected in an image
// Parameters:
//   - people: Slice of Person objects containing detected individuals
//
// Returns:
//   - A templ.Component for rendering the people list
func people(people []immich.Person) templ.Component {
	if len(people) == 0 {
		return templ.NopComponent
	}

	names := []string{}
	for _, person := range people {
		if person.Name != "" {
			names = append(names, templ.EscapeString(person.Name))
		}
	}

	if len(names) == 0 {
		return templ.NopComponent
	}

	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		return templ.Raw(`
			<div>
				<div>
					<h3>People</h3>
				</div>
				<div>`+strings.Join(names, ", ")+`</div>
			</div>
		`).Render(ctx, w)
	})
}

// immichImageUrl constructs the URL for viewing an image in Immich
// Parameters:
//   - baseUrl: The base URL of the Immich instance
//   - externalUrl: The external URL of the Immich instance, if different from base URL
//   - imageID: The ID of the image to view
//
// Returns:
//   - The complete URL string for viewing the image, or '#' if URL parsing fails
func immichImageUrl(baseUrl, externalUrl, imageID string) string {
	// Use external URL if provided, otherwise fall back to base URL
	urlToParse := externalUrl
	if urlToParse == "" {
		urlToParse = baseUrl
	}

	u, err := url.Parse(urlToParse)
	if err != nil {
		log.Warn("Failed to parse base URL", "error", err)
		return "#"
	}

	return (&url.URL{
		Scheme: u.Scheme,
		Host:   u.Host,
		Path:   path.Join("photos", imageID),
	}).String()
}

// webhookSignature generates a signature for webhook authentication.
// It combines the shared secret with the current Unix timestamp
// to create a time-based signature for securing webhook requests.
// Returns:
//   - A string containing the calculated signature
func webhookSignature() string {
	return utils.CalculateSignature(common.SharedSecret, strconv.FormatInt(time.Now().Unix(), 10))
}
