package views

import (
	"fmt"
	"github.com/damongolding/immich-kiosk/config"
	"github.com/damongolding/immich-kiosk/immich"
	"github.com/damongolding/immich-kiosk/utils"
	"strings"
	"time"
)

templ ImageFitCover(ImageData, imageFit string) {
	<img
		class="frame--image-fit-cover"
		src={ ImageData }
		alt="Main image"
	/>
}

templ ImageFitNone(ImageData, imageFit string) {
	<img
		src={ ImageData }
		alt="Main image"
	/>
}

templ ImageFitContain(ImageData, imageFit string) {
	<img
		class="frame--image-fit-contain"
		src={ ImageData }
		alt="Main image"
	/>
}

func ImageLocation(info immich.ExifInfo) string {
	var location strings.Builder

	if info.City != "" {
		location.WriteString(info.City)
	}

	if info.State != "" {
		location.WriteString(", ")
		location.WriteString(info.State)
	}

	if info.Country != "" {
		location.WriteString("<span>, </span><br class=\"responsive-break\"/>")
		location.WriteString(info.Country)
	}

	return location.String()
}

func ImageExif(info immich.ExifInfo) string {
	var stats strings.Builder

	if info.FNumber != 0 {
		stats.WriteString(fmt.Sprintf("<span class=\"image--metadata--exif--fnumber\">&#402;</span>/%.1f", info.FNumber))
	}

	if info.ExposureTime != "" {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("%s <small>s<small>", info.ExposureTime))
	}

	if info.FocalLength != 0 {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("%vmm", info.FocalLength))
	}

	if info.Iso != 0 {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("ISO %v", info.Iso))
	}

	return stats.String()
}

func ImageDateTime(data PageData) string {
	var imageDate string

	var imageTimeFormat string
	if data.Config.ImageTimeFormat == "12" {
		imageTimeFormat = time.Kitchen
	} else {
		imageTimeFormat = time.TimeOnly
	}

	imageDateFormat := utils.DateToLayout(data.Config.ImageDateFormat)
	if imageDateFormat == "" {
		imageDateFormat = config.DefaultDateLayout
	}

	switch {
	case (data.Config.ShowImageDate && data.Config.ShowImageTime):
		imageDate = fmt.Sprintf("%s %s", data.ImmichImage.LocalDateTime.Format(imageTimeFormat), data.ImmichImage.LocalDateTime.Format(imageDateFormat))
	case data.Config.ShowImageDate:
		imageDate = fmt.Sprintf("%s", data.ImmichImage.LocalDateTime.Format(imageDateFormat))
	case data.Config.ShowImageTime:
		imageDate = fmt.Sprintf("%s", data.ImmichImage.LocalDateTime.Format(imageTimeFormat))
	}

	return imageDate
}

templ Image(data PageData) {
	<div class={ "frame", templ.KV("frame-black-bg", !data.Config.BackgroundBlur) }>
		if data.Config.BackgroundBlur && strings.ToLower(data.Config.ImageFit) != "cover" {
			<div class="frame--background">
				<img src={ data.ImageBlurData } alt="Blurred image background"/>
			</div>
		}
		<div class="frame--image">
			switch strings.ToLower(data.Config.ImageFit) {
				case "cover":
					@ImageFitCover(data.ImageData, data.Config.ImageFit)
				case "none":
					@ImageFitNone(data.ImageData, data.Config.ImageFit)
				default:
					@ImageFitContain(data.ImageData, data.Config.ImageFit)
			}
		</div>
		if !data.Config.DisableUi {
			<div class={ "image--metadata", fmt.Sprintf("image--metadata--theme-%s", data.Theme) }>
				if data.Config.ShowImageDate || data.Config.ShowImageTime {
					<div class="image--metadata--date">
						{ ImageDateTime(data) }
					</div>
				}
				if data.Config.ShowImageExif {
					<div class="image--metadata--exif">
						@templ.Raw(ImageExif(data.ImmichImage.ExifInfo))
					</div>
				}
				if data.Config.ShowImageLocation {
					<div class="image--metadata--location">
						@templ.Raw(ImageLocation(data.ImmichImage.ExifInfo))
					</div>
				}
			</div>
		}
	</div>
	<form id="kiosk-history" hx-swap-oob="true">
		for _, entry := range data.Config.History {
			<input type="hidden" class="kiosk-history--entry" name="history" value={ entry }/>
		}
		<input type="hidden" class="kiosk-history--entry" name="history" value={ data.ImmichImage.ID }/>
	</form>
}

templ ImageSplit(data ...PageData) {
	switch len(data) < 2 {
		case true:
			@Image(data[0])
		default:
			<div class={ "frame", templ.KV("frame-black-bg", !data[0].Config.BackgroundBlur) }>
				for _, imageData := range data {
					<div class="frame--split">
						if imageData.Config.BackgroundBlur && strings.ToLower(imageData.Config.ImageFit) != "cover" {
							<div class="frame--background">
								<img src={ imageData.ImageBlurData } alt="Blurred image background"/>
							</div>
						}
						<div class="frame--image">
							switch strings.ToLower(imageData.Config.ImageFit) {
								case "cover":
									@ImageFitCover(imageData.ImageData, imageData.Config.ImageFit)
								case "none":
									@ImageFitNone(imageData.ImageData, imageData.Config.ImageFit)
								default:
									@ImageFitContain(imageData.ImageData, imageData.Config.ImageFit)
							}
						</div>
						if !imageData.Config.DisableUi {
							<div class={ "image--metadata", fmt.Sprintf("image--metadata--theme-%s", imageData.Theme) }>
								if imageData.Config.ShowImageDate || imageData.Config.ShowImageTime {
									<div class="image--metadata--date">
										{ ImageDateTime(imageData) }
									</div>
								}
								if imageData.Config.ShowImageExif {
									<div class="image--metadata--exif">
										@templ.Raw(ImageExif(imageData.ImmichImage.ExifInfo))
									</div>
								}
								if imageData.Config.ShowImageLocation {
									<div class="image--metadata--location">
										@templ.Raw(ImageLocation(imageData.ImmichImage.ExifInfo))
									</div>
								}
							</div>
						}
					</div>
				}
			</div>
	}
	<form id="kiosk-history" hx-swap-oob="true">
		for _, entry := range data[0].Config.History {
			<input type="hidden" class="kiosk-history--entry" name="history" value={ entry }/>
		}
		<input type="hidden" class="kiosk-history--entry" name="history" value={ data[0].ImmichImage.ID }/>
	</form>
}
