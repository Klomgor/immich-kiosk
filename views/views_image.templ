package views

import (
	"fmt"
	"github.com/charmbracelet/log"
	"github.com/damongolding/immich-kiosk/config"
	"github.com/damongolding/immich-kiosk/immich"
	"github.com/damongolding/immich-kiosk/utils"
	"strings"
	"time"
)

templ ImageFitCover(ImageData, imageFit string) {
	<img
		class="frame--image-fit-cover"
		src={ ImageData }
		alt="Main image"
	/>
}

templ ImageFitNone(ImageData, imageFit string) {
	<img
		src={ ImageData }
		alt="Main image"
	/>
}

templ ImageFitContain(ImageData, imageFit string) {
	<img
		class="frame--image-fit-contain"
		src={ ImageData }
		alt="Main image"
	/>
}

css transformOrigin(value string) {
	transform-origin: { value };
}

func smartZoom(image immich.ImmichAsset) templ.CSSClass {

	if len(image.People) == 0 && len(image.UnassignedFaces) == 0 {
		log.Info("No FACES", "ID", image.ID)
		return transformOrigin(fmt.Sprintf("%s %s", utils.RandomItem([]string{"top", "bottom"}), utils.RandomItem([]string{"left", "right"})))
	}

	x, y := image.FacesCenterPoint()

	if x == 0 || y == 0 {
		log.Info("No FACES", x, y, "ID", image.ID)
		return transformOrigin(fmt.Sprintf("%s %s", utils.RandomItem([]string{"top", "bottom"}), utils.RandomItem([]string{"left", "right"})))
	}

	return transformOrigin(fmt.Sprintf("%f%% %f%%", x, y))

}

func ImageLocation(info immich.ExifInfo) string {
	var location strings.Builder

	if info.City != "" {
		location.WriteString(info.City)
	}

	if info.State != "" {
		location.WriteString(", ")
		location.WriteString(info.State)
	}

	if info.Country != "" {
		location.WriteString("<span>, </span><br class=\"responsive-break\"/>")
		location.WriteString(info.Country)
	}

	return location.String()
}

func ImageExif(info immich.ExifInfo) string {
	var stats strings.Builder

	if info.FNumber != 0 {
		stats.WriteString(fmt.Sprintf("<span class=\"image--metadata--exif--fnumber\">&#402;</span>/%.1f", info.FNumber))
	}

	if info.ExposureTime != "" {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("%s<small>s</small>", info.ExposureTime))
	}

	if info.FocalLength != 0 {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("%vmm", info.FocalLength))
	}

	if info.Iso != 0 {
		if stats.Len() > 0 {
			stats.WriteString("<span class=\"image--metadata--exif--seperator\">&#124;</span>")
		}
		stats.WriteString(fmt.Sprintf("ISO %v", info.Iso))
	}

	return stats.String()
}

func ImageDateTime(viewData ViewData, imageIndex int) string {
	var imageDate string

	var imageTimeFormat string
	if viewData.ImageTimeFormat == "12" {
		imageTimeFormat = time.Kitchen
	} else {
		imageTimeFormat = time.TimeOnly
	}

	imageDateFormat := utils.DateToLayout(viewData.ImageDateFormat)
	if imageDateFormat == "" {
		imageDateFormat = config.DefaultDateLayout
	}

	switch {
	case (viewData.ShowImageDate && viewData.ShowImageTime):
		imageDate = fmt.Sprintf("%s %s", viewData.Images[imageIndex].ImmichImage.LocalDateTime.Format(imageTimeFormat), viewData.Images[imageIndex].ImmichImage.LocalDateTime.Format(imageDateFormat))
	case viewData.ShowImageDate:
		imageDate = fmt.Sprintf("%s", viewData.Images[imageIndex].ImmichImage.LocalDateTime.Format(imageDateFormat))
	case viewData.ShowImageTime:
		imageDate = fmt.Sprintf("%s", viewData.Images[imageIndex].ImmichImage.LocalDateTime.Format(imageTimeFormat))
	}

	return imageDate
}

templ imageMetadata(viewData ViewData, imageIndex int) {
	<div class={ "image--metadata", fmt.Sprintf("image--metadata--theme-%s", viewData.Theme) }>
		if viewData.ShowImageDate || viewData.ShowImageTime {
			<div class="image--metadata--date">
				{ ImageDateTime(viewData, imageIndex) }
			</div>
		}
		if viewData.ShowImageExif {
			<div class="image--metadata--exif">
				@templ.Raw(ImageExif(viewData.Images[imageIndex].ImmichImage.ExifInfo))
			</div>
		}
		if viewData.ShowImageLocation {
			<div class="image--metadata--location">
				@templ.Raw(ImageLocation(viewData.Images[imageIndex].ImmichImage.ExifInfo))
			</div>
		}
		if viewData.ShowImageID {
			<div class="image--metadata--id">
				{ viewData.Images[imageIndex].ImmichImage.ID }
			</div>
		}
	</div>
}

templ frame() {
	<div class="frame--image">
		{ children... }
	</div>
}

templ frameWithZoom(refresh int, imageEffect string, img immich.ImmichAsset) {
	switch imageEffect {
		case "smart-zoom":
			<div class={ "frame--image", "frame--image-zoom" , animationDuration(refresh), zoomInOrOut(imageEffect), smartZoom(img) }>
				{ children... }
			</div>
		default:
			<div class={ "frame--image", "frame--image-zoom" , animationDuration(refresh), zoomInOrOut(imageEffect) }>
				{ children... }
			</div>
	}
}

templ layoutSingleView(viewData ViewData) {
	<div class={ "frame", templ.KV("frame-black-bg", !viewData.BackgroundBlur) }>
		if viewData.BackgroundBlur && !strings.EqualFold(viewData.ImageFit, "cover") && len(viewData.Images[0].ImageBlurData) > 0 {
			<div class="frame--background">
				<img src={ viewData.Images[0].ImageBlurData } alt="Blurred image background"/>
			</div>
		}
		switch strings.ToLower(viewData.ImageEffect) {
			case "zoom", "smart-zoom":
				@frameWithZoom(viewData.Refresh, viewData.ImageEffect, viewData.Images[0].ImmichImage) {
					@ImageFitCover(viewData.Images[0].ImageData, viewData.ImageFit)
				}
			default:
				@frame() {
					switch strings.ToLower(viewData.ImageFit) {
						case "cover":
							@ImageFitCover(viewData.Images[0].ImageData, viewData.ImageFit)
						case "none":
							@ImageFitNone(viewData.Images[0].ImageData, viewData.ImageFit)
						default:
							@ImageFitContain(viewData.Images[0].ImageData, viewData.ImageFit)
					}
				}
		}
		if !viewData.DisableUi {
			if !viewData.DisableUi {
				@imageMetadata(viewData, 0)
			}
		}
	</div>
}

templ layoutSplitView(viewData ViewData) {
	<div class={ "frame", templ.KV("frame-black-bg", !viewData.BackgroundBlur) }>
		for imageIndex, imageData := range viewData.Images {
			<div class={ fmt.Sprintf("frame--layout-%s", viewData.Layout) }>
				if viewData.BackgroundBlur && !strings.EqualFold(viewData.ImageFit, "cover") && len(imageData.ImageBlurData) > 0 {
					<div class="frame--background">
						<img src={ imageData.ImageBlurData } alt="Blurred image background"/>
					</div>
				}
				switch strings.ToLower(viewData.ImageEffect) {
					case "zoom", "smart-zoom":
						@frameWithZoom(viewData.Refresh, viewData.ImageEffect, viewData.Images[imageIndex].ImmichImage) {
							@ImageFitCover(imageData.ImageData, viewData.ImageFit)
						}
					default:
						@frame() {
							switch strings.ToLower(viewData.ImageFit) {
								case "cover":
									@ImageFitCover(imageData.ImageData, viewData.ImageFit)
								case "none":
									@ImageFitNone(imageData.ImageData, viewData.ImageFit)
								default:
									@ImageFitContain(imageData.ImageData, viewData.ImageFit)
							}
						}
				}
				if !viewData.DisableUi {
					@imageMetadata(viewData, imageIndex)
				}
			</div>
		}
	</div>
}

templ Image(viewData ViewData) {
	if len(viewData.Images) < 2 {
		@layoutSingleView(viewData)
	} else {
		@layoutSplitView(viewData)
	}
	<form id="kiosk-history" hx-swap-oob="true">
		for _, historyEntry := range viewData.History {
			<input type="hidden" class="kiosk-history--entry" name="history" value={ historyEntry }/>
		}
		for _, newHistoryEntry := range viewData.Images {
			<input type="hidden" class="kiosk-history--entry" name="history" value={ newHistoryEntry.ImmichImage.ID }/>
		}
	</form>
}
